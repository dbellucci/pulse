Pulse is a small framework for building network prober and collect response time. Right now there 
are two available prober: ICMP and HTTP but more are coming soon and little effort is required
to build new one from scratch.


Example HTTP Prober:

HTTP.probe('http://www.google.it/', :count =>5, :round_trip => 5, :frequency => 10, :delta => 0.005) do |probe|
	probe.each do |rtt|
		puts "#{Time.now.to_s} rtt:  #{rtt.to_s}"
	end
end

count         total number of probe composing continuous probe set
round_trip    waiting seconds between each probe in a continuous probe set
frequency     waiting seconds between continuous probes set scheduling
delta         ignore rtt value if differs by 'delta' seconds from previous one


Example ICMP Prober:

ICMP.probe('192.168.20.1', :count =>5, :round_trip => 5, :frequency => 10, :delta => 0.005) do |probe|
	probe.each do |rtt|
		PulseDB::db_report(rtt.to_s)
				
		puts "#{Time.now.to_s} rtt:  #{rtt.to_s}"
	end
end



To collect data a comes a SQLite3 Mixin: PulseDB

PulseDB::db_open('HTTP_pulse.sqlite')

HTTP.probe('http://www.google.it/', :count =>5, :round_trip => 5, :frequency => 10, :delta => 0.005) do |probe|
	probe.each do |rtt|
		PulseDB::db_report(rtt)
				
		puts "#{Time.now.to_s} rtt:  #{rtt.to_s}"
	end
end


On previous example data will be stored on 'HTTP_pulse.sqlite'. Hit ctrl-c when you want to stop probeing.
The consistency of the Database is guaranteed by an at_exit{ } charged to close DB.



TODO:
* Use event-machine
* Handle multiple targets at once
* Grep-Probe: grep a string on connect to say service alive!
.....
.....
 
